stringsAsFactors=FALSE)
#Step 1:
#PUT ALL VARIABLE CONVERSIONS HERE:
#Call Risk Model
df <- filter(df
, !is.na(annualIncome)
, loanTermMonths == 60
, interestRateAnnual >= .1
, interestRateAnnual <= 0.22)
if(nrow(df) == 0){
return(df$id)
}
df$ConsumerSentiment<-ConsumerSentiment
df$delinquenciesLast7Years[is.na(df$delinquenciesLast7Years)]<-0
df$monthlyincome<-df$annualIncome/12
#Purpose
df$ListingCategory<-0
df$ListingCategory[df$loanPurpose == 1]<- 1
#Employment
df$Employed<-1
df$Employed[df$employmentStatusDesc %in% c('Employed', 'Full-time')]<-0
# calculate diff date
df$diffdate<-as.numeric(as.Date(df$listingStartDate) - as.Date(df$earliestCreditLine))
dfModel<-left_join(df,Unemploy, by = 'borrowerState')
scoredLoans<-SmartlendersRisk(dfModel)
#Step 3:
#Call Strategy Function
passing<-SmartlendersStrategy(scoredLoans)
return(passing)
}
SmartlendersRisk<-function(df){
#PUT EQUATION FOR RISK SCORE CALCULATION HERE
#NOTE: I LEFT STATEDMONTHLYINCOME in the EQUATION
df$low<- 1.297822e+00 +
(-1.496655e-05 * df$requestAmount) +
(-8.035141e-06 * df$delinquentAmount) +
(-2.745045e-01 * df$Employed) +
(-9.875008e-02 * df$inqueriesLast6mths) +
(-1.262117e+01 * df$interestRateAnnual) +
(2.936449e-01 * df$isHomeowner) +
(6.605418e-05 * df$monthlyincome) +
(-2.078113e-02 * df$openRevolvingAccounts) +
(-9.637696e-02 * df$publicRecordsLast10Years) +
(-8.779811e-02 * df$TotalProsperLoans) +
(3.460415e-05 * df$diffdate) +
(-5.860054e+00 * df$UnemploymentRate) +
(3.311999e-02 * df$ConsumerSentiment)
df$high<- 1.610156e+00 +
(-2.759310e-05 * df$requestAmount) +
(-3.850361e-07 * df$debtToIncomeRatioWithNewLoan) +
(9.240683e-03 * df$delinquenciesLast7Years) +
(3.569732e-04 * df$employmentLengthMonths) +
(-4.090614e-02 * df$inqueriesLast6mths) +
(-7.333419e+00 * df$interestRateAnnual) +
(7.709788e-02 * df$isHomeowner) +
(6.637183e-05 * df$monthlyincome) +
(2.356338e-01 * df$bankcardUtilized) +
(-5.971416e-02 * df$TotalProsperLoans) +
(-5.462886e-02 * df$accountsNowDelinquent) +
(1.545842e-05 * df$diffdate) +
(-4.586483e+00 * df$UnemploymentRate) +
(1.669954e-02 * df$ConsumerSentiment)
df$RiskScore<-1 / (1 + exp(-1 * df$low))
df$RiskScore[df$interestRateAnnual >=.145] <- 1/(1+exp(-1*df$high[df$interestRateAnnual >=.145]))
return(df)
}
SmartlendersStrategy<-function(scoredLoans){
slope = 1.1
margin = 0.05
passing = filter(scoredLoans,
!(RiskScore <= .98 & interestRateAnnual >= .065 & interestRateAnnual< .12) &
!(interestRateAnnual <= (slope*(1 - RiskScore) + margin) & interestRateAnnual >= .12 & interestRateAnnual < .182 ) &
!(RiskScore <= .88 & interestRateAnnual >= .182))
return(passing$id)
}
model(c, SmartlendersStrategyStrict)
model(c, SmartlendersStrategyLoose)
SmartlendersStrategyStrict <- function(df) {
ConsumerSentiment = 94.7
Unemploy<-data.frame(borrowerState = c('AL','AK','AZ','AR','CA','CO','CT','DE','DC','FL','GA','HI','ID','IL','IN','IA','KS','KY','LA','ME','MD','MA','MI','MN','MS','MO','MT','NE','NV','NH','NJ','NM','NY','NC','ND','OH','OK','OR','PA','PR','RI','SC','SD','TN','TX','UT','VT','VA','WA','WV','WI','WY'),
UnemploymentRate = c(0.06,0.067,0.056,0.038,0.052,0.033,0.057,0.041,0.061,0.047,0.053,0.032,0.037,0.064,0.05,0.039,0.037,0.051,0.063,0.035,0.045,0.042,0.047,0.038,0.059,0.043,0.042,0.03,0.061,0.027,0.049,0.062,0.047,0.051,0.032,0.051,0.047,0.045,0.055,0.117,0.054,0.056,0.025,0.041,0.044,0.038,0.031,0.037,0.058,0.062,0.042,0.056),
stringsAsFactors=FALSE)
#Step 1:
#PUT ALL VARIABLE CONVERSIONS HERE:
#Call Risk Model
df <- filter(df
, !is.na(annualIncome)
, loanTermMonths == 60
, interestRateAnnual >= .1
, interestRateAnnual <= 0.22)
if(nrow(df) == 0){
return(df$id)
}
df$ConsumerSentiment<-ConsumerSentiment
df$delinquenciesLast7Years[is.na(df$delinquenciesLast7Years)]<-0
df$monthlyincome<-df$annualIncome/12
#Purpose
df$ListingCategory<-0
df$ListingCategory[df$loanPurpose == 1]<- 1
#Employment
df$Employed<-1
df$Employed[df$employmentStatusDesc %in% c('Employed', 'Full-time')]<-0
# calculate diff date
df$diffdate<-as.numeric(as.Date(df$listingStartDate) - as.Date(df$earliestCreditLine))
dfModel<-left_join(df,Unemploy, by = 'borrowerState')
scoredLoans<-SmartlendersRisk(dfModel)
#Step 3:
#Call Strategy Function
passing<-SmartlendersStrategy(scoredLoans)
return(passing)
}
model(c, SmartlendersStrategyLoose)
model(c, SmartlendersStrategyStrict)
##Model for Smartlenders for Lending Club
#Last updated: Aug 1 , 2016 - Data from May, 2016
#Note: Each month, Consumer Sentiment and Unemployment must be updated with data provided by Smartlenders from 3 months prior
library(dplyr)
model<-function(df, risk = NULL, strategyFunction = SmartlendersStrategy){
ConsumerSentiment = 94.7
Unemploy<-data.frame(borrowerState = c('AL','AK','AZ','AR','CA','CO','CT','DE','DC','FL','GA','HI','ID','IL','IN','IA','KS','KY','LA','ME','MD','MA','MI','MN','MS','MO','MT','NE','NV','NH','NJ','NM','NY','NC','ND','OH','OK','OR','PA','PR','RI','SC','SD','TN','TX','UT','VT','VA','WA','WV','WI','WY'),
UnemploymentRate = c(0.06,0.067,0.056,0.038,0.052,0.033,0.057,0.041,0.061,0.047,0.053,0.032,0.037,0.064,0.05,0.039,0.037,0.051,0.063,0.035,0.045,0.042,0.047,0.038,0.059,0.043,0.042,0.03,0.061,0.027,0.049,0.062,0.047,0.051,0.032,0.051,0.047,0.045,0.055,0.117,0.054,0.056,0.025,0.041,0.044,0.038,0.031,0.037,0.058,0.062,0.042,0.056),
stringsAsFactors=FALSE)
#Step 1:
#PUT ALL VARIABLE CONVERSIONS HERE:
df<-filter(df, !is.na(df$platformGrade) &
!is.na(df$annualIncome) &
interestRateAnnual > 14 &
interestRateAnnual <= 22 &
loanTermMonths == 60)
if(nrow(df) == 0){
return(df$id)
}
dflc<-left_join(df,Unemploy, by = 'borrowerState')
dflc$ConsumerSentiment<-ConsumerSentiment
#dflc$inqueriesLast6mths[is.na(dflc$inqueriesLast6mths)]<-0
#interestRateAnnual:
dflc$interestRateAnnual<-dflc$interestRateAnnual/100
#Revol_util
dflc$revolvingUtilization<-dflc$revolvingUtilization/100
#home_ownershipOther
dflc$home_ownershipOther = 1
dflc$home_ownershipOther[dflc$homeOwnStatus =='MORTGAGE']<-0
#purpose
dflc$loanPurposefinancial_debt<-0
dflc$loanPurposefinancial_debt[dflc$loanPurpose %in% c('credit_card', 'debt_consolidation')]<-1
#Difference between the listing date and the variable earliest_cr_line (in days)
dflc$diffdate<-as.numeric(as.Date(dflc$listingStartDate) - as.Date(dflc$earliestCreditLine))
dflc$collections12MthsExMed<-as.numeric(dflc$collections12MthsExMed)
#Call Risk Model
scoredLoans<-SmartlendersRisk(dflc)
#Step 3:
#Call Strategy Function
passing<-strategyFunction(scoredLoans)
return(passing)
}
SmartlendersRisk<-function(dflc){
#PUT EQUATION FOR RISK SCORE CALCULATION HERE
#Example:
dflc$low <- 1.631694e+00 +
(-1.352072e+01 *dflc$interestRateAnnual) +
(-1.597688e-01 * dflc$home_ownershipOther) +
(7.497516e-06 * dflc$annualIncome) +
(1.661917e-01 * dflc$loanPurposefinancial_debt) +
(-1.335480e-01 *dflc$inqueriesLast6mths) +
(-9.961341e+00 *dflc$UnemploymentRate) +
(3.157996e-02 *dflc$ConsumerSentiment)
dflc$high <-
(-9.922209e-06 * dflc$requestAmount) +
(-9.594955e+00 *dflc$interestRateAnnual) +
(4.618155e-06 * dflc$annualIncome) +
(-8.503324e-03 * dflc$debtToIncomeRatio) +
(2.179158e-03 * dflc$ficoRangeHigh) +
(3.275742e-05 * dflc$diffdate) +
(4.649002e-02 * dflc$delinquenciesLast2Years) +
(-5.995710e-02 *dflc$inqueriesLast6mths) +
(8.320396e-02 *dflc$publicRecords) +
(2.248195e-06 *dflc$revolvingBalance) +
(1.704558e-01 *dflc$revolvingUtilization) +
(-8.910404e+00 *dflc$UnemploymentRate) +
(2.696875e-02 *dflc$ConsumerSentiment)
dflc$RiskScore <- 1/(1+exp(-1*dflc$low))
dflc$RiskScore[dflc$interestRateAnnual >=.145] <- 1/(1+exp(-1*dflc$high[dflc$interestRateAnnual >=.145]))
return(dflc)
}
SmartlendersStrategy<-function(df){
slope = 1.4
margin = 0.05
passing = filter(df,
!(interestRateAnnual >= .078 & interestRateAnnual < .12 & RiskScore <= .99) &
!(interestRateAnnual <= (slope*(1 - RiskScore) + margin) & interestRateAnnual >= .12 & interestRateAnnual < .2499 )&
!(interestRateAnnual >= .2499 & RiskScore <= .8572))
return(passing$id)
}
load(file.path("~/Google Drive/Analytics/Analytic Reports By Client/modelDevelopment/dataframe_LendingClub_added_fields.0"))
model(c)
##Model for Smartlenders for Lending Club
#Last updated: Aug 1 , 2016 - Data from May, 2016
#Note: Each month, Consumer Sentiment and Unemployment must be updated with data provided by Smartlenders from 3 months prior
library(dplyr)
model<-function(df, risk = NULL, strategyFunction = SmartlendersStrategy){
ConsumerSentiment = 94.7
Unemploy<-data.frame(borrowerState = c('AL','AK','AZ','AR','CA','CO','CT','DE','DC','FL','GA','HI','ID','IL','IN','IA','KS','KY','LA','ME','MD','MA','MI','MN','MS','MO','MT','NE','NV','NH','NJ','NM','NY','NC','ND','OH','OK','OR','PA','PR','RI','SC','SD','TN','TX','UT','VT','VA','WA','WV','WI','WY'),
UnemploymentRate = c(0.06,0.067,0.056,0.038,0.052,0.033,0.057,0.041,0.061,0.047,0.053,0.032,0.037,0.064,0.05,0.039,0.037,0.051,0.063,0.035,0.045,0.042,0.047,0.038,0.059,0.043,0.042,0.03,0.061,0.027,0.049,0.062,0.047,0.051,0.032,0.051,0.047,0.045,0.055,0.117,0.054,0.056,0.025,0.041,0.044,0.038,0.031,0.037,0.058,0.062,0.042,0.056),
stringsAsFactors=FALSE)
#Step 1:
#PUT ALL VARIABLE CONVERSIONS HERE:
df<-filter(df, !is.na(df$platformGrade) &
!is.na(df$annualIncome) &
interestRateAnnual > 10 &
loanTermMonths == 36 &
platformGrade %in% c('A','B','C','D'))
if(nrow(df) == 0){
return(df$id)
}
dflc<-left_join(df,Unemploy, by = 'borrowerState')
dflc$ConsumerSentiment<-ConsumerSentiment
#dflc$inqueriesLast6mths[is.na(dflc$inqueriesLast6mths)]<-0
#interestRateAnnual:
dflc$interestRateAnnual<-dflc$interestRateAnnual/100
#Revol_util
dflc$revolvingUtilization<-dflc$revolvingUtilization/100
#home_ownershipOther
dflc$home_ownershipOther = 1
dflc$home_ownershipOther[dflc$homeOwnStatus =='MORTGAGE']<-0
#purpose
dflc$loanPurposefinancial_debt<-0
dflc$loanPurposefinancial_debt[dflc$loanPurpose %in% c('credit_card', 'debt_consolidation')]<-1
#employmentLengthMonths
if(nrow(dflc[is.na(dflc$employmentLengthMonths),]) > 0){
dflc[is.na(dflc$employmentLengthMonths),]$employmentLengthMonths <- 0
}
dflc$employmentLengthMonthsmore_5<-0
dflc$employmentLengthMonthsmore_5[dflc$employmentLengthMonths >= 60]<-1
#Difference between the listing date and the variable earliest_cr_line (in days)
dflc$diffdate<-as.numeric(as.Date(dflc$listingStartDate) - as.Date(dflc$earliestCreditLine))
dflc$collections12MthsExMed<-as.numeric(dflc$collections12MthsExMed)
#Call Risk Model
scoredLoans<-SmartlendersRisk(dflc)
#Step 3:
#Call Strategy Function
passing<-strategyFunction(scoredLoans)
return(passing)
}
SmartlendersRisk<-function(dflc){
#PUT EQUATION FOR RISK SCORE CALCULATION HERE
#Example:
dflc$low <- 3.156626e+00 +
(-6.994215e-06 * dflc$requestAmount) +
(-1.679236e+01 *dflc$interestRateAnnual) +
(5.561243e-02 * dflc$employmentLengthMonthsmore_5) +
(-1.079133e-01 * dflc$home_ownershipOther) +
(6.280392e-06 * dflc$annualIncome) +
(2.480550e-01 * dflc$loanPurposefinancial_debt) +
(-1.557166e-02 * dflc$debtToIncomeRatio) +
(-1.056794e-01 *dflc$inqueriesLast6mths) +
(-5.816044e-03 *dflc$openAccounts) +
(2.690364e-06 *dflc$revolvingBalance) +
(-2.293165e-01 *dflc$revolvingUtilization) +
(4.955890e-01 *dflc$collections12MthsExMed) +
(-6.332109e+00 *dflc$UnemploymentRate) +
(2.004773e-02 *dflc$ConsumerSentiment)
dflc$high <- 8.239780e-01 +
(-1.616578e-05 * dflc$requestAmount) +
(-1.011162e+01 *dflc$interestRateAnnual) +
(6.181173e-02 * dflc$employmentLengthMonthsmore_5) +
(-1.257309e-01 * dflc$home_ownershipOther) +
(5.163280e-06 * dflc$annualIncome) +
(-1.424672e-02 * dflc$debtToIncomeRatio) +
(3.194531e-03 * dflc$ficoRangeHigh) +
(1.672983e-05 * dflc$diffdate) +
(-8.476783e-02 *dflc$inqueriesLast6mths) +
(1.043704e-01 *dflc$publicRecords) +
(1.666708e-06 *dflc$revolvingBalance) +
(-5.334212e+00 *dflc$UnemploymentRate) +
(1.098010e-02 *dflc$ConsumerSentiment)
dflc$RiskScore <- 1/(1+exp(-1*dflc$low))
dflc$RiskScore[dflc$interestRateAnnual >=.12] <- 1/(1+exp(-1*dflc$high[dflc$interestRateAnnual >=.12]))
return(dflc)
}
SmartlendersStrategy<-function(df){
slope = 1.4
margin = 0.0375
risk = 0.88
passing = filter(df,
!((RiskScore < .98) & (0.078 <= interestRateAnnual & interestRateAnnual < 0.10)) &
!((interestRateAnnual <= (slope*(1 - RiskScore) + margin)) & (0.10 <= interestRateAnnual & interestRateAnnual < .2055)) &
RiskScore > risk)
return(passing$id)
}
model(c)
##Model for Smartlenders for Prosper
#Last updated: Aug 1 , 2016 - Data from May, 2016
#Note: Each month, Consumer Sentiment and Unemployment must be updated with data provided by Smartlenders from 3 months prior
library(dplyr)
model<-function(df, risk = NULL, strategyFunction = SmartlendersStrategyLoose){
ids <- strategyFunction(df)
return(ids)
}
SmartlendersStrategyLoose <- function(df){
df <- filter(df
, loanTermMonths == 60
, interestRateAnnual < .22
, interestRateAnnual >= 0.1
, inqueriesLast6mths == 0
, TotalProsperLoans == 0
, isHomeowner == 1)
return(df$id)
}
SmartlendersStrategyStrict <- function(df) {
ConsumerSentiment = 94.7
Unemploy<-data.frame(borrowerState = c('AL','AK','AZ','AR','CA','CO','CT','DE','DC','FL','GA','HI','ID','IL','IN','IA','KS','KY','LA','ME','MD','MA','MI','MN','MS','MO','MT','NE','NV','NH','NJ','NM','NY','NC','ND','OH','OK','OR','PA','PR','RI','SC','SD','TN','TX','UT','VT','VA','WA','WV','WI','WY'),
UnemploymentRate = c(0.06,0.067,0.056,0.038,0.052,0.033,0.057,0.041,0.061,0.047,0.053,0.032,0.037,0.064,0.05,0.039,0.037,0.051,0.063,0.035,0.045,0.042,0.047,0.038,0.059,0.043,0.042,0.03,0.061,0.027,0.049,0.062,0.047,0.051,0.032,0.051,0.047,0.045,0.055,0.117,0.054,0.056,0.025,0.041,0.044,0.038,0.031,0.037,0.058,0.062,0.042,0.056),
stringsAsFactors=FALSE)
#Step 1:
#PUT ALL VARIABLE CONVERSIONS HERE:
#Call Risk Model
df <- filter(df
, !is.na(annualIncome)
, loanTermMonths == 60
, interestRateAnnual >= .1
, interestRateAnnual <= 0.22)
if(nrow(df) == 0){
return(df$id)
}
df$ConsumerSentiment<-ConsumerSentiment
df$delinquenciesLast7Years[is.na(df$delinquenciesLast7Years)]<-0
df$monthlyincome<-df$annualIncome/12
#Purpose
df$ListingCategory<-0
df$ListingCategory[df$loanPurpose == 1]<- 1
#Employment
df$Employed<-1
df$Employed[df$employmentStatusDesc %in% c('Employed', 'Full-time')]<-0
# calculate diff date
df$diffdate<-as.numeric(as.Date(df$listingStartDate) - as.Date(df$earliestCreditLine))
dfModel<-left_join(df,Unemploy, by = 'borrowerState')
scoredLoans<-SmartlendersRisk(dfModel)
#Step 3:
#Call Strategy Function
passing<-SmartlendersStrategy(scoredLoans)
return(passing)
}
SmartlendersRisk<-function(df){
#PUT EQUATION FOR RISK SCORE CALCULATION HERE
#NOTE: I LEFT STATEDMONTHLYINCOME in the EQUATION
df$low<- 1.297822e+00 +
(-1.496655e-05 * df$requestAmount) +
(-8.035141e-06 * df$delinquentAmount) +
(-2.745045e-01 * df$Employed) +
(-9.875008e-02 * df$inqueriesLast6mths) +
(-1.262117e+01 * df$interestRateAnnual) +
(2.936449e-01 * df$isHomeowner) +
(6.605418e-05 * df$monthlyincome) +
(-2.078113e-02 * df$openRevolvingAccounts) +
(-9.637696e-02 * df$publicRecordsLast10Years) +
(-8.779811e-02 * df$TotalProsperLoans) +
(3.460415e-05 * df$diffdate) +
(-5.860054e+00 * df$UnemploymentRate) +
(3.311999e-02 * df$ConsumerSentiment)
df$high<- 1.610156e+00 +
(-2.759310e-05 * df$requestAmount) +
(-3.850361e-07 * df$debtToIncomeRatioWithNewLoan) +
(9.240683e-03 * df$delinquenciesLast7Years) +
(3.569732e-04 * df$employmentLengthMonths) +
(-4.090614e-02 * df$inqueriesLast6mths) +
(-7.333419e+00 * df$interestRateAnnual) +
(7.709788e-02 * df$isHomeowner) +
(6.637183e-05 * df$monthlyincome) +
(2.356338e-01 * df$bankcardUtilized) +
(-5.971416e-02 * df$TotalProsperLoans) +
(-5.462886e-02 * df$accountsNowDelinquent) +
(1.545842e-05 * df$diffdate) +
(-4.586483e+00 * df$UnemploymentRate) +
(1.669954e-02 * df$ConsumerSentiment)
df$RiskScore<-1 / (1 + exp(-1 * df$low))
df$RiskScore[df$interestRateAnnual >=.145] <- 1/(1+exp(-1*df$high[df$interestRateAnnual >=.145]))
return(df)
}
SmartlendersStrategy<-function(scoredLoans){
slope = 1.1
margin = 0.05
passing = filter(scoredLoans,
!(RiskScore <= .98 & interestRateAnnual >= .065 & interestRateAnnual< .12) &
!(interestRateAnnual <= (slope*(1 - RiskScore) + margin) & interestRateAnnual >= .12 & interestRateAnnual < .182 ) &
!(RiskScore <= .88 & interestRateAnnual >= .182))
return(passing$id)
}
model(c)
load(file.path("~/Google Drive/Analytics/Analytic Reports By Client/modelDevelopment/dataframe_Prosper_added_fields.Rdata"))
model(c)
model(c, strategyFunction = SmartlendersStrategyStrict)
shiny::runApp('dev/names')
runApp('dev/names')
head(faithful)
runApp('dev/names')
top_10_names <- read.csv('input/top_10_each_year.csv', header = T)
setwd('~/dev/names')
top_10_names <- read.csv('input/top_10_each_year.csv', header = T)
head(top_10_names)
runApp()
runApp()
top_10_names$sex
library(dplyr)
library(ggplot2)
setwd('~/dev/names')
names <- read.csv('input/yob1880.txt', header = F, col.names = c('name', 'sex', 'count'))
names$year <- 1880
for(year in seq(1881, 2015)) {
print(paste0('Loading names for year: ', year))
current <- read.csv(paste0('input/yob', year, '.txt'), header = F, col.names = c('name', 'sex', 'count'))
current$year <- year
names <- rbind(names, current) # Combine into single dataset
}
head(names)
lapply(names, class)
library(readr)
names <- read_csv('input/yob1880.txt', header = F, col_names = c('name', 'sex', 'count'))
?read_csv
head(names)
names <- read_csv('input/yob1880.txt', col_names = c('name', 'sex', 'count'))
head(names)
names$year <- 1880
# Get all years
for(year in seq(1881, 2015)) {
print(paste0('Loading names for year: ', year))
current <- read_csv(paste0('input/yob', year, '.txt'), col_names = c('name', 'sex', 'count'))
current$year <- year
names <- rbind(names, current) # Combine into single dataset
}
names <- read_csv('input/yob1880.txt', col_names = c('name', 'sex', 'count'), col_types = cols(col_character(), col_character(), col_numeric()))
names <- read_csv('input/yob1880.txt', col_names = c('name', 'sex', 'count'), col_types = cols(col_character(), col_character(), col_number()))
names$year <- 1880
head(names)
for(year in seq(1881, 2015)) {
print(paste0('Loading names for year: ', year))
current <- read_csv(paste0('input/yob', year, '.txt'), col_names = c('name', 'sex', 'count'), , col_types = cols(col_character(), col_character(), col_number()))
current$year <- year
names <- rbind(names, current) # Combine into single dataset
}
lapply(names, class)
top_10_each_year <- names %>% group_by(year, sex) %>% top_n(n = 10, wt = count)
write.csv(top_10_each_year, 'input/top_10_each_year.csv', row.names = F)
runApp()
top_10_names <- read.csv('input/top_10_each_year.csv', header = T)
head(top_10_names)
top_10_names <- read_csv('input/top_10_each_year.csv')
head(top_10_names)
runApp()
runApp()
runApp()
runApp()
input.year
state.name
input$year
top_10_names$year
runApp()
runApp()
library(dplyr)
library(readr)
library(ggplot2)
setwd('~/dev/names')
# Get first year
names <- read_csv('input/yob1880.txt', col_names = c('name', 'sex', 'count'), col_types = cols(col_character(), col_character(), col_number()))
names$year <- 1880
# Get all years
for(year in seq(1881, 2015)) {
print(paste0('Loading names for year: ', year))
current <- read_csv(paste0('input/yob', year, '.txt'), col_names = c('name', 'sex', 'count'), , col_types = cols(col_character(), col_character(), col_number()))
current$year <- year
names <- rbind(names, current) # Combine into single dataset
}
names$name <- as.factor(names$name)
top_10_each_year <- names %>% group_by(year, sex) %>% top_n(n = 10, wt = count)
write.csv(top_10_each_year, 'input/top_10_each_year.csv', row.names = F)
top_10_names <- read_csv('input/top_10_each_year.csv')
head(top_10_names)
head(top_10_names)
top_10_names$name <- as.factor(top_10_names$name)
head(top_10_names)
top_10_names_subset <- filter(top_10_names, sex == input$sex, year == input$year)
runApp()
runApp()
filter(top_10_names, sex == input$sex, year == input$year) %>%
mutate(name = reorder(name, count))
runApp()
head(top_10_names)
top_10_names_subset <- filter(top_10_names, sex == input$sex, year == input$year)
top_10_names_subset <- filter(top_10_names, sex == 'input$sex'F'', year == 1880)
top_10_names_subset <- filter(top_10_names, sex == 'F', year == 1880)
top_10_names_subset$name <- factor(top_10_names_subset$name , levels = top_10_names_subset[order(top_10_names_subset$count), 1])
top_10_names_subset
top_10_names <- read_csv('input/top_10_each_year.csv')
top_10_names$name <- factor(top_10_names$name)
top_10_names_subset <- filter(top_10_names, sex == input$sex, year == input$year)
top_10_names_subset <- filter(top_10_names, sex == 'F', year == 1880)
top_10_names_subset$name <- factor(top_10_names_subset$name , levels = top_10_names_subset[order(top_10_names_subset$count), 1])
top_10_names_subset
top_10_names <- read_csv('input/top_10_each_year.csv')
top_10_names_subset <- filter(top_10_names, sex == input$sex, year == input$year)
top_10_names_subset <- filter(top_10_names, sex == 'F', year == 1880)
top_10_names_subset
top_10_names_subset$name <- factor(top_10_names_subset$name , levels = top_10_names_subset[order(top_10_names_subset$count), 1])
top_10_names_subset
subset <- filter(top_10_names, sex == input$sex, year == input$year)
subset <- filter(top_10_names, sex == 'F', year == 1880)
subset
subset$name <- factor(subset$name, levels = subset$name[order(subset$count)])
subset
runApp()
runApp()
runApp()
runApp()
